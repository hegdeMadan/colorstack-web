{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _set2 = require('lodash/set');\n\nvar _set3 = _interopRequireDefault(_set2);\n\nvar _merge2 = require('lodash/merge');\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _groupBy2 = require('lodash/groupBy');\n\nvar _groupBy3 = _interopRequireDefault(_groupBy2);\n\nvar _values2 = require('lodash/values');\n\nvar _values3 = _interopRequireDefault(_values2);\n\nexports.default = crossSliceReducer;\n\nvar _immer = require('immer');\n\nvar _immer2 = _interopRequireDefault(_immer);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction crossSliceReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments[1];\n  return (0, _immer2.default)(state, function (draft) {\n    switch (action.type) {\n      case _constants.actionTypes.DOCUMENT_MODIFIED:\n      case _constants.actionTypes.DOCUMENT_ADDED:\n      case _constants.actionTypes.DOCUMENT_REMOVED:\n      case _constants.actionTypes.LISTENER_RESPONSE:\n      case _constants.actionTypes.UNSET_LISTENER:\n        var groups = (0, _groupBy3.default)((0, _values3.default)(state.queries), function (c) {\n          return c.storeAs || c.collection;\n        });\n\n        for (var storeAs in groups) {\n          var updated = {};\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = groups[storeAs][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var item = _step.value;\n              (0, _merge3.default)(updated, (0, _get3.default)(item, 'data', {}));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          (0, _set3.default)(draft, ['composite', storeAs], updated);\n        }\n\n        return draft;\n\n      default:\n        return state;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}