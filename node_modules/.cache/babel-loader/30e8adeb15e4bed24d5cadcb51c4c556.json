{"ast":null,"code":"export var signInAction = function signInAction(credentials) {\n  return function (dispatch, getState, _ref) {\n    var getFirebase = _ref.getFirebase;\n    var firebase = getFirebase(); // initializing firebase\n    // calling dispatch after passing credentials to firebase\n    // and loggin user in\n\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(function () {\n      dispatch({\n        type: 'LOGIN_SUCCESS'\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: 'LOGIN_ERROR',\n        err: err\n      });\n    });\n  };\n}; // logging user out\n\nexport var signOutAction = function signOutAction() {\n  return function (dispatch, getState, _ref2) {\n    var getFirebase = _ref2.getFirebase;\n    var firebase = getFirebase(); // initializing firebase\n    // dispatch is called from onclick on logout\n\n    firebase.auth().signOut().then(function () {\n      dispatch({\n        type: 'SIGNOUT_SUCCESS'\n      });\n    });\n  };\n}; // user signup storing user data into firebase\n\nexport var signUpAction = function signUpAction(newUser) {\n  return function (dispatch, getState, _ref3) {\n    var getFirebase = _ref3.getFirebase,\n        getFirestore = _ref3.getFirestore;\n    var firebase = getFirebase(); // initializing firebase\n\n    var firestore = getFirestore();\n    var email = newUser.email;\n    var val = email.split(\"@\");\n    var username = val[0]; // creating new user passing user details\n\n    firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(function (resp) {\n      firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0],\n        email: newUser.email,\n        username: username,\n        time: new Date()\n      });\n    }).then(function () {\n      dispatch({\n        type: 'SIGNUP_SUCESS'\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: 'SIGNUP_ERROR',\n        err: err\n      });\n    });\n  };\n};\nexport var recoverPassword = function recoverPassword(email) {\n  return function (dispatch, getState, _ref4) {\n    var getFirebase = _ref4.getFirebase;\n    var firebase = getFirebase();\n    var auth = firebase.auth();\n    var emailId = email.email;\n    auth.sendPasswordResetEmail(emailId).then(function () {\n      console.log(\"link has been sent\");\n    }).catch(function (error) {\n      console.log(\"error\", error);\n    });\n  };\n};\nexport var signInWithGoogle = function signInWithGoogle() {\n  return function (dispatch, getState, _ref5) {\n    var getFirebase = _ref5.getFirebase,\n        getFirestore = _ref5.getFirestore;\n    var firebase = getFirebase();\n    var firestore = getFirestore();\n    var provider = new firebase.auth.GoogleAuthProvider(); // firebase.auth().signInWithPopup(provider)\n\n    firebase.auth().signInWithRedirect(provider); // .then(user => console.log(\"what?\",user))\n    // firebase.auth().getRedirectResult().then((result) => {\n    //   // TODO: check if user has a profile picture already\n    //   // existed and don't put google user profile picture\n    //   // if so\n    //   console.log(\"result: \", result)\n    //   console.log(\"email: \", result.email)\n    //\n    //   const user = result.user\n    //   const fullName = user.displayName\n    //   const finalName = fullName.split(\" \")\n    //   const firstname = finalName[0]\n    //   const lastname = finalName[1]\n    //   const url = user.photoURL\n    //\n    //   const val = result.email.split(\"@\")\n    //   const username = val[0]\n    //\n    //   firestore.collection('users').doc(user.uid).set({\n    //     fullName: fullName,\n    //     username,\n    //     initials: `${firstname[0]}${lastname[0]}`,\n    //     pictureUrl: url\n    //   })\n    //   .then(() => {\n    //     dispatch({ type: 'SIGNUP_SUCESS' })\n    //     console.log(\"success adding user!\", `${firstname[0]} ${lastname[1]}`)\n    //   }).catch((err) => {\n    //     dispatch({type: 'SIGNUP_ERROR', err })\n    //   })\n    //\n    // }).catch((error) => {\n    //   // Handle Errors here.\n    //   const errorCode = error.code;\n    //   console.log(\"google errorCode: \", errorCode)\n    //\n    //   const errorMessage = error.message;\n    //   console.log(\"google err: \", errorMessage)\n    //   // The email of the user's account used.\n    //   const email = error.email;\n    //   console.log(\"google mail: \", email)\n    //   // The firebase.auth.AuthCredential type that was used.\n    //   const credential = error.credential;\n    //   console.log(\"google cred: \", credential)\n    // })\n  };\n};\nexport var addUserAfterGoogleSignIn = function addUserAfterGoogleSignIn() {\n  console.log(\"1 fired\");\n  return function (dispatch, getState, _ref6) {\n    var getFirebase = _ref6.getFirebase,\n        getFirestore = _ref6.getFirestore;\n    console.log(\"2 fired\");\n    var firebase = getFirebase();\n    var firestore = getFirestore();\n    firebase.auth().getRedirectResult().then(function (result) {\n      // TODO: check if user has a profile picture already\n      // existed and don't put google user profile picture\n      // if so\n      console.log(\"result1: \", result.user.email);\n      console.log(\"result2: \", result.user.displayName);\n      console.log(\"result3: \", result.user.uid);\n      var val = user.email.split(\"@\");\n      var username = val[0];\n      firestore.collection('users').doc(user.uid).set({\n        username: username\n      }).then(function () {\n        dispatch({\n          type: 'SIGNUP_SUCESS'\n        });\n        console.log(\"success adding user!\", result.user.displayName);\n      }).catch(function (err) {\n        dispatch({\n          type: 'SIGNUP_ERROR',\n          err: err\n        });\n      });\n    }).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      console.log(\"google errorCode: \", errorCode);\n      var errorMessage = error.message;\n      console.log(\"google err: \", errorMessage); // The email of the user's account used.\n\n      var email = error.email;\n      console.log(\"google mail: \", email); // The firebase.auth.AuthCredential type that was used.\n\n      var credential = error.credential;\n      console.log(\"google cred: \", credential);\n    });\n  };\n};\nexport var googleSignIn = function googleSignIn() {\n  return function (dispath, getState, _ref7) {\n    var getFirebase = _ref7.getFirebase,\n        getFirestore = _ref7.getFirestore;\n  };\n};","map":{"version":3,"sources":["/home/madan/Documents/workspace/artwork/src/store/actions/AuthActions.js"],"names":["signInAction","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","then","type","catch","err","signOutAction","signOut","signUpAction","newUser","getFirestore","firestore","val","split","username","createUserWithEmailAndPassword","resp","collection","doc","user","uid","set","firstName","lastName","initials","time","Date","recoverPassword","emailId","sendPasswordResetEmail","console","log","error","signInWithGoogle","provider","GoogleAuthProvider","signInWithRedirect","addUserAfterGoogleSignIn","getRedirectResult","result","displayName","errorCode","code","errorMessage","message","credential","googleSignIn","dispath"],"mappings":"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","sourcesContent":["export const signInAction = (credentials) => {\n  return (dispatch, getState, { getFirebase }) => {\n    let firebase = getFirebase() // initializing firebase\n\n    // calling dispatch after passing credentials to firebase\n    // and loggin user in\n    firebase.auth().signInWithEmailAndPassword(\n      credentials.email,\n      credentials.password\n    ).then(() => {\n      dispatch({ type: 'LOGIN_SUCCESS' })\n    }).catch((err) => {\n      dispatch({ type: 'LOGIN_ERROR', err })\n    })\n  }\n}\n\n// logging user out\nexport const signOutAction = () => {\n  return(dispatch, getState, { getFirebase }) => {\n    let firebase = getFirebase() // initializing firebase\n\n    // dispatch is called from onclick on logout\n    firebase.auth().signOut().then(() => {\n      dispatch({ type: 'SIGNOUT_SUCCESS' })\n    })\n  }\n}\n\n// user signup storing user data into firebase\nexport const signUpAction = (newUser) => {\n  return(dispatch, getState, { getFirebase, getFirestore }) => {\n    let firebase = getFirebase() // initializing firebase\n    let firestore = getFirestore()\n    let email = newUser.email\n    let val = email.split(\"@\")\n    let username = val[0]\n\n    // creating new user passing user details\n    firebase.auth().createUserWithEmailAndPassword(\n      newUser.email,\n      newUser.password\n    ).then((resp) => {\n      firestore.collection('users').doc(resp.user.uid).set({\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        initials: newUser.firstName[0] + newUser.lastName[0],\n        email: newUser.email,\n        username,\n        time: new Date()\n      })\n    }).then(() => {\n      dispatch({ type: 'SIGNUP_SUCESS' })\n    }).catch((err) => {\n      dispatch({type: 'SIGNUP_ERROR', err })\n    })\n  }\n}\n\nexport const recoverPassword = (email) => {\n  return (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    const auth = firebase.auth()\n    const emailId = email.email\n\n    auth.sendPasswordResetEmail(emailId)\n    .then(() => {\n      console.log(\"link has been sent\")\n    })\n    .catch((error) => {\n      console.log(\"error\", error)\n    })\n  }\n}\n\nexport const signInWithGoogle = () => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    const provider = new firebase.auth.GoogleAuthProvider()\n\n    // firebase.auth().signInWithPopup(provider)\n    firebase.auth().signInWithRedirect(provider)\n    // .then(user => console.log(\"what?\",user))\n\n    // firebase.auth().getRedirectResult().then((result) => {\n    //   // TODO: check if user has a profile picture already\n    //   // existed and don't put google user profile picture\n    //   // if so\n    //   console.log(\"result: \", result)\n    //   console.log(\"email: \", result.email)\n    //\n    //   const user = result.user\n    //   const fullName = user.displayName\n    //   const finalName = fullName.split(\" \")\n    //   const firstname = finalName[0]\n    //   const lastname = finalName[1]\n    //   const url = user.photoURL\n    //\n    //   const val = result.email.split(\"@\")\n    //   const username = val[0]\n    //\n    //   firestore.collection('users').doc(user.uid).set({\n    //     fullName: fullName,\n    //     username,\n    //     initials: `${firstname[0]}${lastname[0]}`,\n    //     pictureUrl: url\n    //   })\n    //   .then(() => {\n    //     dispatch({ type: 'SIGNUP_SUCESS' })\n    //     console.log(\"success adding user!\", `${firstname[0]} ${lastname[1]}`)\n    //   }).catch((err) => {\n    //     dispatch({type: 'SIGNUP_ERROR', err })\n    //   })\n    //\n    // }).catch((error) => {\n    //   // Handle Errors here.\n    //   const errorCode = error.code;\n    //   console.log(\"google errorCode: \", errorCode)\n    //\n    //   const errorMessage = error.message;\n    //   console.log(\"google err: \", errorMessage)\n    //   // The email of the user's account used.\n    //   const email = error.email;\n    //   console.log(\"google mail: \", email)\n    //   // The firebase.auth.AuthCredential type that was used.\n    //   const credential = error.credential;\n    //   console.log(\"google cred: \", credential)\n    // })\n  }\n}\n\nexport const addUserAfterGoogleSignIn = () => {\n  console.log(\"1 fired\")\n  return(dispatch, getState, { getFirebase, getFirestore }) => {\n  console.log(\"2 fired\")\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    firebase.auth().getRedirectResult().then((result) => {\n      // TODO: check if user has a profile picture already\n      // existed and don't put google user profile picture\n      // if so\n      console.log(\"result1: \", result.user.email)\n      console.log(\"result2: \", result.user.displayName)\n      console.log(\"result3: \", result.user.uid)\n\n      const val = user.email.split(\"@\")\n      const username = val[0]\n\n      firestore.collection('users').doc(user.uid).set({\n        username: username\n      })\n      .then(() => {\n        dispatch({ type: 'SIGNUP_SUCESS' })\n        console.log(\"success adding user!\", result.user.displayName)\n      }).catch((err) => {\n        dispatch({type: 'SIGNUP_ERROR', err })\n      })\n\n    }).catch((error) => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      console.log(\"google errorCode: \", errorCode)\n\n      const errorMessage = error.message;\n      console.log(\"google err: \", errorMessage)\n      // The email of the user's account used.\n      const email = error.email;\n      console.log(\"google mail: \", email)\n      // The firebase.auth.AuthCredential type that was used.\n      const credential = error.credential;\n      console.log(\"google cred: \", credential)\n    })\n  }\n}\n\n\nexport const googleSignIn = () => {\n  return(dispath, getState, { getFirebase, getFirestore}) => {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}