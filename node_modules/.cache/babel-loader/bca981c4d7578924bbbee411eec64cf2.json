{"ast":null,"code":"import _objectSpread from \"/home/madan/Documents/workspace/artwork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport var createComment = function createComment(comment) {\n  return function (dispatch, getState, _ref) {\n    var getFirebase = _ref.getFirebase,\n        getFirestore = _ref.getFirestore;\n    var firestore = getFirestore();\n    var profile = getState().firebase.profile;\n    var userId = getState().firebase.auth.uid;\n    var projectId = comment.commentToPost;\n    firestore.collection('projects').doc(projectId).collection('comments').add(_objectSpread({}, comment, {\n      commentFromId: userId,\n      commentFrom: \"\".concat(profile.firstName, \" \").concat(profile.lastName),\n      commentTime: new Date()\n    })).then(function () {\n      dispatch({\n        type: 'CREATE_COMMENT',\n        comment: comment\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: 'CREATE_COMMENT_ERROR',\n        error: error\n      });\n    });\n  };\n};\nexport var commentReply = function commentReply(data) {\n  return function (dispatch, getState, _ref2) {\n    var getFirebase = _ref2.getFirebase,\n        getFirestore = _ref2.getFirestore;\n    var firestore = getFirestore();\n    var profile = getState().firebase.profile;\n    var userId = getState().firebase.auth.uid;\n    var projectId = data.projectId;\n    var commentId = data.commentId;\n    console.log(projectId, commentId);\n    firestore.collection('projects').doc(projectId).collection('comments').doc(commentId).collection('reply').add({\n      replyContent: data.replyContent,\n      replyFromId: userId,\n      replyFrom: \"\".concat(profile.firstName, \" \").concat(profile.lastName),\n      time: new Date(),\n      isHidden: false\n    });\n  };\n};","map":{"version":3,"sources":["/home/madan/Documents/workspace/artwork/src/store/actions/CommentAction.js"],"names":["createComment","comment","dispatch","getState","getFirebase","getFirestore","firestore","profile","firebase","userId","auth","uid","projectId","commentToPost","collection","doc","add","commentFromId","commentFrom","firstName","lastName","commentTime","Date","then","type","catch","error","commentReply","data","commentId","console","log","replyContent","replyFromId","replyFrom","time","isHidden"],"mappings":";AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACxC,SAAO,UAACC,QAAD,EAAWC,QAAX,QAAuD;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;AAE5D,QAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,QAAME,OAAO,GAAGJ,QAAQ,GAAGK,QAAX,CAAoBD,OAApC;AACA,QAAME,MAAM,GAAGN,QAAQ,GAAGK,QAAX,CAAoBE,IAApB,CAAyBC,GAAxC;AACA,QAAMC,SAAS,GAAGX,OAAO,CAACY,aAA1B;AAEAP,IAAAA,SAAS,CAACQ,UAAV,CAAqB,UAArB,EAAiCC,GAAjC,CAAqCH,SAArC,EACCE,UADD,CACY,UADZ,EAECE,GAFD,mBAGKf,OAHL;AAIEgB,MAAAA,aAAa,EAAER,MAJjB;AAKES,MAAAA,WAAW,YAAKX,OAAO,CAACY,SAAb,cAA0BZ,OAAO,CAACa,QAAlC,CALb;AAMEC,MAAAA,WAAW,EAAE,IAAIC,IAAJ;AANf,QAQCC,IARD,CAQM,YAAM;AACVrB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,gBAAP;AAAyBvB,QAAAA,OAAO,EAAPA;AAAzB,OAAD,CAAR;AACD,KAVD,EAWCwB,KAXD,CAWO,UAACC,KAAD,EAAW;AAChBxB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,sBAAP;AAA+BE,QAAAA,KAAK,EAALA;AAA/B,OAAD,CAAR;AACD,KAbD;AAcD,GArBD;AAsBD,CAvBM;AAyBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AACpC,SAAO,UAAC1B,QAAD,EAAWC,QAAX,SAAuD;AAAA,QAAhCC,WAAgC,SAAhCA,WAAgC;AAAA,QAAnBC,YAAmB,SAAnBA,YAAmB;AAE5D,QAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,QAAME,OAAO,GAAGJ,QAAQ,GAAGK,QAAX,CAAoBD,OAApC;AACA,QAAME,MAAM,GAAGN,QAAQ,GAAGK,QAAX,CAAoBE,IAApB,CAAyBC,GAAxC;AAJ4D,QAKpDC,SALoD,GAKtCgB,IALsC,CAKpDhB,SALoD;AAAA,QAMpDiB,SANoD,GAMtCD,IANsC,CAMpDC,SANoD;AAO5DC,IAAAA,OAAO,CAACC,GAAR,CAAYnB,SAAZ,EAAuBiB,SAAvB;AAEAvB,IAAAA,SAAS,CAACQ,UAAV,CAAqB,UAArB,EAAiCC,GAAjC,CAAqCH,SAArC,EACCE,UADD,CACY,UADZ,EACwBC,GADxB,CAC4Bc,SAD5B,EAECf,UAFD,CAEY,OAFZ,EAGCE,GAHD,CAGK;AACHgB,MAAAA,YAAY,EAAEJ,IAAI,CAACI,YADhB;AAEHC,MAAAA,WAAW,EAAExB,MAFV;AAGHyB,MAAAA,SAAS,YAAK3B,OAAO,CAACY,SAAb,cAA0BZ,OAAO,CAACa,QAAlC,CAHN;AAIHe,MAAAA,IAAI,EAAE,IAAIb,IAAJ,EAJH;AAKHc,MAAAA,QAAQ,EAAE;AALP,KAHL;AAUD,GAnBD;AAoBD,CArBM","sourcesContent":["export const createComment = (comment) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile\n    const userId = getState().firebase.auth.uid\n    const projectId = comment.commentToPost\n\n    firestore.collection('projects').doc(projectId)\n    .collection('comments')\n    .add({\n      ...comment,\n      commentFromId: userId,\n      commentFrom: `${profile.firstName} ${profile.lastName}`,\n      commentTime: new Date()\n    })\n    .then(() => {\n      dispatch({type: 'CREATE_COMMENT', comment})\n    })\n    .catch((error) => {\n      dispatch({type: 'CREATE_COMMENT_ERROR', error})\n    })\n  }\n}\n\nexport const commentReply = (data) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile\n    const userId = getState().firebase.auth.uid\n    const { projectId } = data\n    const { commentId } = data\n    console.log(projectId, commentId)\n\n    firestore.collection('projects').doc(projectId)\n    .collection('comments').doc(commentId)\n    .collection('reply')\n    .add({\n      replyContent: data.replyContent,\n      replyFromId: userId,\n      replyFrom: `${profile.firstName} ${profile.lastName}`,\n      time: new Date(),\n      isHidden: false\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}