{"ast":null,"code":"export var createProject = function createProject(project) {\n  return function (dispatch, getState, _ref) {\n    var getFirebase = _ref.getFirebase,\n        getFirestore = _ref.getFirestore;\n    console.log(\"image: \", project.image); // adding data to firestore\n\n    var firestore = getFirestore();\n    var firebase = getFirebase();\n    var profile = getState().firebase.profile; // retreiving user profile info\n\n    var userId = getState().firebase.auth.uid; // accessing user's user ID\n    // firebase.storage()\n\n    var image = project.image; // getting file\n\n    var imageNameChanged = userId + image;\n    var storageRef = firebase.storage().ref(\"wallposts/\".concat(userId) + image.name); // creating storage reference\n    // reference to the image to get the download Url\n    // inserting image to firestore\n\n    var task = storageRef.put(image).then(function (snapshot) {\n      console.log('image has been inserted');\n      dispatch({\n        type: 'UPLOAD_IMAGE',\n        project: project\n      });\n    }).catch(function (err) {\n      console.log('error occured', err);\n      dispatch({\n        type: 'UPLOAD_ERR',\n        err: err\n      });\n    }); // adding data to firestore collection named projects\n\n    firestore.collection('projects').add({\n      title: project.title,\n      content: project.content,\n      imageUrl: project.imageUrl,\n      authorFirstName: profile.firstName,\n      authorSecondName: profile.lastName,\n      authorId: userId,\n      createdAt: new Date()\n    }).then(function () {\n      dispatch({\n        type: 'CREATE_PROJECT',\n        project: project\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: 'CREATE_PROJECT_ERR',\n        err: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/madan/Documents/workspace/artwork/src/store/actions/ProjectActions.js"],"names":["createProject","project","dispatch","getState","getFirebase","getFirestore","console","log","image","firestore","firebase","profile","userId","auth","uid","imageNameChanged","storageRef","storage","ref","name","task","put","then","snapshot","type","catch","err","collection","add","title","content","imageUrl","authorFirstName","firstName","authorSecondName","lastName","authorId","createdAt","Date"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACxC,SAAO,UAACC,QAAD,EAAWC,QAAX,QAAwD;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;AAE7DC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,OAAO,CAACO,KAA/B,EAF6D,CAG7D;;AACA,QAAMC,SAAS,GAAGJ,YAAY,EAA9B;AACA,QAAMK,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,OAAO,GAAGR,QAAQ,GAAGO,QAAX,CAAoBC,OAApC,CAN6D,CAMjB;;AAC5C,QAAMC,MAAM,GAAGT,QAAQ,GAAGO,QAAX,CAAoBG,IAApB,CAAyBC,GAAxC,CAP6D,CAOjB;AAE5C;;AACA,QAAMN,KAAK,GAAGP,OAAO,CAACO,KAAtB,CAV6D,CAUjC;;AAC5B,QAAMO,gBAAgB,GAAGH,MAAM,GAAGJ,KAAlC;AACA,QAAMQ,UAAU,GAAGN,QAAQ,CAACO,OAAT,GAAmBC,GAAnB,CAAuB,oBAAaN,MAAb,IAAwBJ,KAAK,CAACW,IAArD,CAAnB,CAZ6D,CAYiB;AAE9E;AAGA;;AACA,QAAMC,IAAI,GAAGJ,UAAU,CAACK,GAAX,CAAeb,KAAf,EACZc,IADY,CACP,UAACC,QAAD,EAAc;AAClBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAL,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,cAAP;AAAuBvB,QAAAA,OAAO,EAAPA;AAAvB,OAAD,CAAR;AACD,KAJY,EAKZwB,KALY,CAKN,UAACC,GAAD,EAAS;AACdpB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BmB,GAA7B;AACAxB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,YAAP;AAAqBE,QAAAA,GAAG,EAAHA;AAArB,OAAD,CAAR;AACD,KARY,CAAb,CAlB6D,CA4B7D;;AACAjB,IAAAA,SAAS,CAACkB,UAAV,CAAqB,UAArB,EAAiCC,GAAjC,CAAqC;AACnCC,MAAAA,KAAK,EAAE5B,OAAO,CAAC4B,KADoB;AAEnCC,MAAAA,OAAO,EAAE7B,OAAO,CAAC6B,OAFkB;AAGnCC,MAAAA,QAAQ,EAAE9B,OAAO,CAAC8B,QAHiB;AAInCC,MAAAA,eAAe,EAAErB,OAAO,CAACsB,SAJU;AAKnCC,MAAAA,gBAAgB,EAAEvB,OAAO,CAACwB,QALS;AAMnCC,MAAAA,QAAQ,EAAExB,MANyB;AAOnCyB,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAPwB,KAArC,EAQGhB,IARH,CAQQ,YAAM;AACZpB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAC,gBAAN;AAAwBvB,QAAAA,OAAO,EAAPA;AAAxB,OAAD,CAAR;AACD,KAVD,EAUGwB,KAVH,CAUS,UAACC,GAAD,EAAS;AAChBxB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAC,oBAAN;AAA4BE,QAAAA,GAAG,EAAHA;AAA5B,OAAD,CAAR;AACD,KAZD;AAaD,GA1CD;AA2CD,CA5CM","sourcesContent":["export const createProject = (project) => {\n  return (dispatch, getState , { getFirebase, getFirestore }) => {\n\n    console.log(\"image: \", project.image)\n    // adding data to firestore\n    const firestore = getFirestore()\n    const firebase = getFirebase()\n    const profile = getState().firebase.profile // retreiving user profile info\n    const userId = getState().firebase.auth.uid // accessing user's user ID\n\n    // firebase.storage()\n    const image = project.image // getting file\n    const imageNameChanged = userId + image\n    const storageRef = firebase.storage().ref(`wallposts/${userId}` + image.name) // creating storage reference\n\n    // reference to the image to get the download Url\n\n\n    // inserting image to firestore\n    const task = storageRef.put(image)\n    .then((snapshot) => {\n      console.log('image has been inserted')\n      dispatch({type: 'UPLOAD_IMAGE', project})\n    })\n    .catch((err) => {\n      console.log('error occured', err)\n      dispatch({type: 'UPLOAD_ERR', err})\n    })\n\n    // adding data to firestore collection named projects\n    firestore.collection('projects').add({\n      title: project.title,\n      content: project.content,\n      imageUrl: project.imageUrl,\n      authorFirstName: profile.firstName,\n      authorSecondName: profile.lastName,\n      authorId: userId,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({type:'CREATE_PROJECT', project })\n    }).catch((err) => {\n      dispatch({type:'CREATE_PROJECT_ERR', err })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}