{"ast":null,"code":"import _objectSpread from \"/home/madan/Documents/workspace/artwork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nexport var allPosts = [];\nexport var getData = function getData() {\n  return function (dispatch, _ref) {\n    var getFirebase = _ref.getFirebase,\n        getFirestore = _ref.getFirestore;\n    // const firestore = firebase.firestore()\n    var firestore = getFirestore();\n    var atFirstCall = firestore.collection('projects').orderBy('createdAt', 'desc').limit(5);\n    return atFirstCall.get().then(function (documentSnapshots) {\n      // Get the last visible document\n      console.log(\"test\");\n      var lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1]; // console.log(\"last\", documentSnapshots);\n\n      documentSnapshots.forEach(function (doc) {\n        var obj = _objectSpread({}, doc.data(), {\n          id: doc.id\n        });\n\n        allPosts.push(obj);\n      }); // Construct a new query starting at this document,\n      // get the next 25 cities.\n      // var next = db.collection(\"cities\")\n      //     .orderBy(\"population\")\n      //     .startAfter(lastVisible)\n      //     .limit(25);\n    }).then(function () {\n      dispatch({\n        type: 'RETRIEVE_POST',\n        allPosts: allPosts\n      });\n      console.log(\"this\", allPosts);\n    }).catch(function (error) {\n      dispatch({\n        type: 'RETRIEVE_POST_ERR',\n        error: \"error retrieving content!\"\n      });\n      console.log(\"something went wrong! Please refresh the page\", error);\n    });\n  };\n};","map":{"version":3,"sources":["/home/madan/Documents/workspace/artwork/src/utils/GetSortedPost.js"],"names":["firebase","allPosts","getData","dispatch","getFirebase","getFirestore","firestore","atFirstCall","collection","orderBy","limit","get","then","documentSnapshots","console","log","lastVisible","docs","length","forEach","doc","obj","data","id","push","type","catch","error"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,IAAIC,QAAQ,GAAG,EAAf;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAM,UAACC,QAAD,QAA6C;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;AACjD;AACA,QAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,QAAME,WAAW,GAAGD,SAAS,CAACE,UAAV,CAAqB,UAArB,EACjBC,OADiB,CACT,WADS,EACI,MADJ,EAEjBC,KAFiB,CAEX,CAFW,CAApB;AAIE,WAAOH,WAAW,CAACI,GAAZ,GAAkBC,IAAlB,CAAuB,UAACC,iBAAD,EAAuB;AACnD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,UAAIC,WAAW,GAAGH,iBAAiB,CAACI,IAAlB,CAAuBJ,iBAAiB,CAACI,IAAlB,CAAuBC,MAAvB,GAA8B,CAArD,CAAlB,CAHmD,CAInD;;AACAL,MAAAA,iBAAiB,CAACM,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/B,YAAIC,GAAG,qBACFD,GAAG,CAACE,IAAJ,EADE;AAELC,UAAAA,EAAE,EAAEH,GAAG,CAACG;AAFH,UAAP;;AAIAtB,QAAAA,QAAQ,CAACuB,IAAT,CAAcH,GAAd;AACD,OAND,EALmD,CAYnD;AACA;AACA;AACA;AACA;AACA;AAED,KAnBM,EAoBNT,IApBM,CAoBD,YAAM;AACVT,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,eAAP;AAAwBxB,QAAAA,QAAQ,EAARA;AAAxB,OAAD,CAAR;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBd,QAApB;AACD,KAvBM,EAwBNyB,KAxBM,CAwBA,UAAAC,KAAK,EAAI;AACdxB,MAAAA,QAAQ,CAAC;AAACsB,QAAAA,IAAI,EAAE,mBAAP;AACPE,QAAAA,KAAK,EAAE;AADA,OAAD,CAAR;AAEAb,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DY,KAA7D;AACD,KA5BM,CAAP;AA6BH,GApCD;AAqCD,CAtCM","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nexport var allPosts = []\n\nexport const getData = () => {\n  return(dispatch, { getFirebase, getFirestore }) => {\n    // const firestore = firebase.firestore()\n    const firestore = getFirestore()\n    const atFirstCall = firestore.collection('projects')\n      .orderBy('createdAt', 'desc')\n      .limit(5)\n\n      return atFirstCall.get().then((documentSnapshots) => {\n        // Get the last visible document\n        console.log(\"test\")\n        var lastVisible = documentSnapshots.docs[documentSnapshots.docs.length-1];\n        // console.log(\"last\", documentSnapshots);\n        documentSnapshots.forEach(doc => {\n          let obj = {\n            ...doc.data(),\n            id: doc.id\n          }\n          allPosts.push(obj)\n        })\n        // Construct a new query starting at this document,\n        // get the next 25 cities.\n        // var next = db.collection(\"cities\")\n        //     .orderBy(\"population\")\n        //     .startAfter(lastVisible)\n        //     .limit(25);\n\n      })\n      .then(() => {\n        dispatch({type: 'RETRIEVE_POST', allPosts})\n        console.log(\"this\", allPosts)\n      })\n      .catch(error => {\n        dispatch({type: 'RETRIEVE_POST_ERR',\n          error: \"error retrieving content!\"})\n        console.log(\"something went wrong! Please refresh the page\", error)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}