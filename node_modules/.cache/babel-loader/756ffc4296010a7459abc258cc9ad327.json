{"ast":null,"code":"export var createProject = function createProject(project) {\n  return function (dispatch, getState, _ref) {\n    var getFirebase = _ref.getFirebase,\n        getFirestore = _ref.getFirestore;\n    console.log(\"image: \", project.image); // adding data to firestore\n\n    var firestore = getFirestore();\n    var profile = getState().firebase.profile; // retreiving user profile info\n\n    var userId = getState().firebase.auth.uid; // accessing user's user ID\n    // firebase.storage()\n\n    var image = project.image; // getting file\n\n    var storage = firebase.storage();\n    var storageRef = storage.ref(\"wallposts/\".concat(userId) + image.name); // creating storage reference\n    // inserting image to firestore\n\n    var uploadTask = storageRef.put(image);\n    uploadTask.then(function (snapshot) {\n      console.log('image has been inserted');\n      dispatch({\n        type: 'UPLOAD_IMAGE',\n        project: project\n      });\n      getImageUrl();\n    }).catch(function (err) {\n      console.log('error occured', err);\n      dispatch({\n        type: 'UPLOAD_ERR',\n        err: err\n      });\n    });\n    var imageUrl = '';\n\n    var getImageUrl = function getImageUrl() {\n      // reference to the image to get download Url\n      uploadTask.snapshot.ref.getDownloadURL().then(function (url) {\n        imageUrl = url;\n      });\n    }; // adding data to firestore collection named 'projects'\n\n\n    firestore.collection('projects').add({\n      title: project.title,\n      content: project.content,\n      imageUrl: imageUrl,\n      authorFirstName: profile.firstName,\n      authorSecondName: profile.lastName,\n      authorId: userId,\n      createdAt: new Date()\n    }).then(function () {\n      dispatch({\n        type: 'CREATE_PROJECT',\n        project: project\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: 'CREATE_PROJECT_ERR',\n        err: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/madan/Documents/workspace/artwork/src/store/actions/ProjectActions.js"],"names":["createProject","project","dispatch","getState","getFirebase","getFirestore","console","log","image","firestore","profile","firebase","userId","auth","uid","storage","storageRef","ref","name","uploadTask","put","then","snapshot","type","getImageUrl","catch","err","imageUrl","getDownloadURL","url","collection","add","title","content","authorFirstName","firstName","authorSecondName","lastName","authorId","createdAt","Date"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACxC,SAAO,UAACC,QAAD,EAAWC,QAAX,QAAwD;AAAA,QAAhCC,WAAgC,QAAhCA,WAAgC;AAAA,QAAnBC,YAAmB,QAAnBA,YAAmB;AAE7DC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,OAAO,CAACO,KAA/B,EAF6D,CAG7D;;AACA,QAAMC,SAAS,GAAGJ,YAAY,EAA9B;AACA,QAAMK,OAAO,GAAGP,QAAQ,GAAGQ,QAAX,CAAoBD,OAApC,CAL6D,CAKjB;;AAC5C,QAAME,MAAM,GAAGT,QAAQ,GAAGQ,QAAX,CAAoBE,IAApB,CAAyBC,GAAxC,CAN6D,CAMjB;AAE5C;;AACA,QAAMN,KAAK,GAAGP,OAAO,CAACO,KAAtB,CAT6D,CASjC;;AAC5B,QAAMO,OAAO,GAAGJ,QAAQ,CAACI,OAAT,EAAhB;AACA,QAAMC,UAAU,GAAGD,OAAO,CAACE,GAAR,CAAY,oBAAaL,MAAb,IAAwBJ,KAAK,CAACU,IAA1C,CAAnB,CAX6D,CAWM;AAEnE;;AACA,QAAMC,UAAU,GAAGH,UAAU,CAACI,GAAX,CAAeZ,KAAf,CAAnB;AACAW,IAAAA,UAAU,CAACE,IAAX,CAAgB,UAACC,QAAD,EAAc;AAC5BhB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAL,MAAAA,QAAQ,CAAC;AAACqB,QAAAA,IAAI,EAAE,cAAP;AAAuBtB,QAAAA,OAAO,EAAPA;AAAvB,OAAD,CAAR;AACAuB,MAAAA,WAAW;AACZ,KAJD,EAKCC,KALD,CAKO,UAACC,GAAD,EAAS;AACdpB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BmB,GAA7B;AACAxB,MAAAA,QAAQ,CAAC;AAACqB,QAAAA,IAAI,EAAE,YAAP;AAAqBG,QAAAA,GAAG,EAAHA;AAArB,OAAD,CAAR;AACD,KARD;AAUA,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAMH,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACAL,MAAAA,UAAU,CAACG,QAAX,CAAoBL,GAApB,CAAwBW,cAAxB,GACGP,IADH,CACQ,UAAAQ,GAAG,EAAI;AACXF,QAAAA,QAAQ,GAAGE,GAAX;AACD,OAHH;AAID,KAND,CA1B6D,CAkC7D;;;AACApB,IAAAA,SAAS,CAACqB,UAAV,CAAqB,UAArB,EAAiCC,GAAjC,CAAqC;AACnCC,MAAAA,KAAK,EAAE/B,OAAO,CAAC+B,KADoB;AAEnCC,MAAAA,OAAO,EAAEhC,OAAO,CAACgC,OAFkB;AAGnCN,MAAAA,QAAQ,EAARA,QAHmC;AAInCO,MAAAA,eAAe,EAAExB,OAAO,CAACyB,SAJU;AAKnCC,MAAAA,gBAAgB,EAAE1B,OAAO,CAAC2B,QALS;AAMnCC,MAAAA,QAAQ,EAAE1B,MANyB;AAOnC2B,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAPwB,KAArC,EAQGnB,IARH,CAQQ,YAAM;AACZnB,MAAAA,QAAQ,CAAC;AAACqB,QAAAA,IAAI,EAAC,gBAAN;AAAwBtB,QAAAA,OAAO,EAAPA;AAAxB,OAAD,CAAR;AACD,KAVD,EAUGwB,KAVH,CAUS,UAACC,GAAD,EAAS;AAChBxB,MAAAA,QAAQ,CAAC;AAACqB,QAAAA,IAAI,EAAC,oBAAN;AAA4BG,QAAAA,GAAG,EAAHA;AAA5B,OAAD,CAAR;AACD,KAZD;AAaD,GAhDD;AAiDD,CAlDM","sourcesContent":["export const createProject = (project) => {\n  return (dispatch, getState , { getFirebase, getFirestore }) => {\n\n    console.log(\"image: \", project.image)\n    // adding data to firestore\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile // retreiving user profile info\n    const userId = getState().firebase.auth.uid // accessing user's user ID\n\n    // firebase.storage()\n    const image = project.image // getting file\n    const storage = firebase.storage()\n    const storageRef = storage.ref(`wallposts/${userId}` + image.name) // creating storage reference\n\n    // inserting image to firestore\n    const uploadTask = storageRef.put(image)\n    uploadTask.then((snapshot) => {\n      console.log('image has been inserted')\n      dispatch({type: 'UPLOAD_IMAGE', project})\n      getImageUrl()\n    })\n    .catch((err) => {\n      console.log('error occured', err)\n      dispatch({type: 'UPLOAD_ERR', err})\n    })\n\n    var imageUrl = ''\n    const getImageUrl = () => {\n      // reference to the image to get download Url\n      uploadTask.snapshot.ref.getDownloadURL()\n        .then(url => {\n          imageUrl = url\n        })\n    }\n\n    // adding data to firestore collection named 'projects'\n    firestore.collection('projects').add({\n      title: project.title,\n      content: project.content,\n      imageUrl,\n      authorFirstName: profile.firstName,\n      authorSecondName: profile.lastName,\n      authorId: userId,\n      createdAt: new Date()\n    }).then(() => {\n      dispatch({type:'CREATE_PROJECT', project })\n    }).catch((err) => {\n      dispatch({type:'CREATE_PROJECT_ERR', err })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}